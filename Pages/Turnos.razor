@page "/Turnos"
@using Dent.Models
@using System.Globalization
@using System;
@using System.Collections.Generic;
@using System.Linq;
@inject Permisos Permiso
@inject AgregarPracticas AgregarPracticas
@inject EliminarPracticaMetod EliminarPracticaMethod
@inject HttpClient httpClient
@using System.Net.Http.Json

<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: center;
    }

    th {
        background-color: #f2f2f2;
    }

        th:first-child, td:first-child {
            text-align: left;
        }


    *,
    *:before,
    *:after {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
    }

    input[type="date"] {
        background-color: #0080ff;
        padding: 15px;
        font-family: "Roboto Mono",monospace;
        color: #ffffff;
        font-size: 20px;
        border: none;
        outline: none;
        border-radius: 5px;
    }

    ::-webkit-calendar-picker-indicator {
        background-color: #ffffff;
        padding: 5px;
        cursor: pointer;
        border-radius: 3px;
    }
</style>

<h3>Selecciona un día:</h3>
<input type="date" @onchange="HandleDateChange" />
<h3>Horarios para el día @(selectedDate.ToString("dd/MM/yyyy"))</h3>
@{
    List<string> horas = new List<string>();

    DateTime horaInicio = DateTime.Today.AddHours(8); // Hora de inicio: 8:00 AM
    DateTime horaFin = DateTime.Today.AddHours(21);   // Hora de fin: 9:00 PM

    while (horaInicio <= horaFin)
    {
        horas.Add(horaInicio.ToString("HH:mm")); // Agrega la hora formateada a la lista
        horaInicio = horaInicio.AddMinutes(30); // Incrementa 30 minutos
    }
}

  <table class="table table-sm table align-middle table-success table-hover table-bordered border-primary ">
  <thead>
            <tr class="table-dark">
                <th style="width: 30px;">HORA</th>
            <th style="width: 80px;">DIA @(selectedDate.ToString("dd/MM"))</th>
            <th style="width: 250px;">PACIENTE</th>
            <th style="width: 100px;">ODONTOLOGO</th>
            <th style="width: 250px;">TRATAMIENTO</th>
                <th style="width: 200px;"></th>
    </tr>
  </thead>
  <tbody>
        @foreach (var hora in horas)
        {
            @foreach (var turno in TurnosFiltrados)
            {
                TimeSpan horareal = TimeSpan.Parse(hora);
                @if (horareal == turno.Hora)
                {
                    cargarFila(hora);
                    <tr class="table-danger" @onclick="() => SeleccionarTurno(hora, turno.Id)">
                        <td>@horareal.ToString("hh\\:mm")</td>
                    <td>"AGENDADO"</td>
                    <td>@nombrePaciente
                            <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#modalInfoPaciente">&#128065</button>
                    </td>
                    <td>@nombreOdontologo</td>
                    <td>@turno.Practica</td>
                    <td>
                            <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#modalEditarTurno">EDIT</button>
                            <button class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#modalObservaciones">&#128065</button>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#modalBorrarTurno">X</button>
                    </td>
                </tr>
                    condicionCumplida = true;
                    break;
                }

            }

            @if (condicionCumplida == false)
            {
                <tr class="table-primary" @onclick="() => SeleccionarHora(hora, IdTurno)">
                    <td>@hora</td>
                    <td>DISPONIBLE</td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>
                        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#modalAgendarTurno">AGENDAR</button>
                    </td>
                </tr>
            }
            condicionCumplida = false;
        }
    </tbody>
    </table>  

<div style="display: @(currentDiv == 0 ? "block" : "none")">

<div class="form-group">
    <div class="form-group">
        <label style="width: 100%;">PACIENTE:</label>
        <select style="width: 100%;" @bind="IdPacienteAtendido">
            <option value="">Seleccionar</option>
            @foreach (var paciente in listaDePacientes)
            {
                <option value="@paciente.Id">@($"{paciente.Apellido} {paciente.Nombre}")</option>
            }
        </select>
        <p> </p>
        <label style="width: 100%;">PRACTICA:</label>
        <select style="width: 100%;" @bind="IdPracticaSeleccionada">
            <option value="">Seleccionar</option>
            @foreach (var practicaseleccion in ListaDePracticas)
            {
                <option value="@practicaseleccion.Id">@practicaseleccion.Practica</option>
            }
        </select>
        <div style="width: 100%;">
            <textarea rows="4" cols= style="width: 100%;" @bind="textoMultilinea"></textarea>
        </div>
    </div>
</div>
</div>
@if (horarios != null)
{
    <!-- Modal AGENDAR -->
    <div class="modal fade" id="modalAgendarTurno" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">AGENDAR TURNO</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <label style="width: 100%;">ODONTOLOGO:</label>
                    <select style="width: 100%;" @bind="IdOdontologoSeleccionado">
                        <option value="">Seleccionar</option>
                        @foreach (var odontologo in ListaDeOdontologos)
                        {
                            <option value="@odontologo.Id">@(odontologo.Usuario)</option>
                        }
                    </select>
                    <div class="form-group">
                        <div class="form-group">
                            <label style="width: 100%;">PACIENTE:</label>
                            <select style="width: 100%;" @bind="IdPacienteAtendido">
                                <option value="">Seleccionar</option>
                                @foreach (var paciente in listaDePacientes)
                                {
                                    <option value="@paciente.Id">@($"{paciente.Apellido} {paciente.Nombre}")</option>
                                }
                            </select>
                            <p> </p>
                            <label style="width: 100%;">PRACTICA:</label>
                            <select style="width: 100%;" @bind="IdPracticaSeleccionada">
                                <option value="">Seleccionar</option>
                                @foreach (var practicaseleccion in ListaDePracticas)
                                {
                                    <option value="@practicaseleccion.Id">@practicaseleccion.Practica</option>
                                }
                            </select>
                            <div style="width: 100%;">
                                <textarea rows="4" cols= style="width: 100%;" @bind="textoMultilinea"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button style="width: 100%;" class="btn btn-success" disabled="@(!CamposValidos)" data-bs-toggle="modal" data-bs-target="#elTurnoFueAgendado" data-bs-dismiss="modal" @onclick="Agendar">Agendar</button>
                        <button style="width: 100%;" class="btn btn-danger" data-bs-dismiss="modal">X</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="elTurnoFueAgendado" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">TURNO AGENDADO</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="modal-footer">
                         <button style="width: 100%;" class="btn btn-danger" data-bs-dismiss="modal">CERRAR</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal BORRAR -->
    <div class="modal fade" id="modalBorrarTurno" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">TURNO AGENDADO</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="modal-footer">
                        <button style="width: 100%;" class="btn btn-success" data-bs-toggle="modal" data-bs-dismiss="modal" @onclick="() => Borrar(IdEdit)">ELIMINAR</button>
                        <button style="width: 100%;" class="btn btn-danger" data-bs-dismiss="modal">CERRAR</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal OBSERVACIONES -->
    <div class="modal fade" id="modalObservaciones" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">OBSERVACIONES</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        @Observaciones
                    </p>
                    <div class="modal-footer">
                        <button style="width: 100%;" class="btn btn-danger" data-bs-dismiss="modal">CERRAR</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal EDITAR -->
    <div class="modal fade" id="modalEditarTurno" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">EDITAR TURNO</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <label style="width: 100%;">ODONTOLOGO:</label>
                    <select style="width: 100%;" @bind="IdOdontologoSeleccionado">
                        <option value="">Seleccionar</option>
                        @foreach (var odontologo in ListaDeOdontologos)
                        {
                            <option value="@odontologo.Id">@(odontologo.Usuario)</option>
                        }
                    </select>
                    <div class="form-group">
                        <div class="form-group">
                            <label style="width: 100%;">PACIENTE:</label>
                            <select style="width: 100%;" @bind="IdPacienteAtendido">
                                <option value="">Seleccionar</option>
                                @foreach (var paciente in listaDePacientes)
                                {
                                    <option value="@paciente.Id">@($"{paciente.Apellido} {paciente.Nombre}")</option>
                                }
                            </select>
                            <p> </p>
                            <label style="width: 100%;">PRACTICA:</label>
                            <select style="width: 100%;" @bind="IdPracticaSeleccionada">
                                <option value="">Seleccionar</option>
                                @foreach (var practicaseleccion in ListaDePracticas)
                                {
                                    <option value="@practicaseleccion.Id">@practicaseleccion.Practica</option>
                                }
                            </select>
                            <div style="width: 100%;">
                                <textarea rows="4" cols= style="width: 100%;" @bind="textoMultilinea"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button style="width: 100%;" class="btn btn-success" disabled="@(!CamposValidos)" data-bs-toggle="modal" data-bs-target="#elTurnoFueAgendado" data-bs-dismiss="modal" @onclick="() => Editar(IdEdit)">EDITAR</button>
                        <button style="width: 100%;" class="btn btn-danger" data-bs-dismiss="modal">X</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="elTurnoFueAgendado" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">TURNO AGENDADO</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <div class="modal-footer">
                        <button style="width: 100%;" class="btn btn-danger" data-bs-dismiss="modal">CERRAR</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool condicionCumplida = false;
    private string dia = "lunes";
    private bool CamposValidos => IdPacienteAtendido != 0 && IdPracticaSeleccionada != 0 && IdOdontologoSeleccionado != 0;
    private int IdEdit = 0;
    private bool mostrarModalEdit = false;
    private List<PracticasRealizada> ListaDePracticasRealizadas = new List<PracticasRealizada>();
    private List<Paciente> listaDePacientes = new List<Paciente>();
    private List<Practica1> ListaDePracticas = new List<Practica1>();
    private List<Login> ListaDeOdontologos = new List<Login>();
    private int currentDiv = 1;
    private int IdPacienteAtendido;
    private int IdPacienteEditar;
    private int IdOdontologoSeleccionado;
    private string ObraSocialPacienteAtendido = "no cargada";
    private string PracticaSeleccionada;
    private string OdontologoQueAtendio;
    private int IdPracticaSeleccionada;
    private DateTime FiltroFecha = DateTime.Today;
    private DateTime FiltroFechaFin = DateTime.Today;
    private int mes = DateTime.Today.Month;
    private int año = DateTime.Today.Year;
    private int mesSeleccionado = DateTime.Today.Month;
    private int añoSeleccionado = DateTime.Today.Year;
    private int meso = 0;
    private string textoMultilinea = "observacioes del paciente";
    public string Practica = "";
    public string PacienteAtendido = "";
    private string odontologoSeleccionado = "";
    public int Precio = 0;
    public int IdEditar = 0;
    public string miString = "";
    public int MostrarTotal = 0;
    public int MostrarTotalPorcentaje = 0;
    string odontologoFiltrado = " ";
    private string algo = "valor uno";
    private string nombrePaciente = "";
    private string estado = "Disponible";
    private string nombreOdontologo = "";
    private string nombreTratamiento = "";
    private int IdTurno = 12;
    private int? IdPaciente = 0;
    private string Observaciones = "";
    [Inject]
    private DbDentistaContext DbContext { get; set; }

    protected override void OnInitialized()
    {
        ListaDePracticasRealizadas = DbContext.PracticasRealizadas.ToList();
        listaDePacientes = DbContext.Pacientes.ToList();
        ListaDePracticas = DbContext.Practicas.ToList();
        ListaDeOdontologos = DbContext.Logins.ToList();
        ListaDeTurnos = DbContext.Turnos.ToList();
        ListaDeOdontologos = ListaDeOdontologos.Where(p => p.Rol == "odon      ").ToList();
    }
    private List<PracticasRealizada> registrosFiltrados = new List<PracticasRealizada>();
    private List<PracticasRealizada> elementosUnicos = new List<PracticasRealizada>();
    private List<Turno> ListaDeTurnos = new List<Turno>();
    private List<Turno> TurnosFiltrados = new List<Turno>();
    private Turno elementoEncontrado;

    DateTime selectedDate { get; set; }
    TimeSpan Hora = new TimeSpan(20,30,00);
    List<DateTime> horarios { get; set; }

    [Inject]
    private AgregarPracticas agregarPracticas { get; set; }
    [Inject]
    private EliminarPracticaMetod Eliminarla { get; set; }


    protected override async Task OnInitializedAsync()
    {
        selectedDate = DateTime.Today;
        await LoadHorarios();
    }
    TimeSpan HoraBuscada = new TimeSpan (09, 00, 00);
    private void HandleDateChange(ChangeEventArgs e)
    {
        // Aquí puedes hacer lo que necesites con el valor seleccionado
        if (DateTime.TryParse(e.Value.ToString(), out DateTime result))
        {
            selectedDate = result;
        }
        else
        {
            // Manejar el caso en que la conversión falle
            Console.WriteLine("No se pudo convertir el valor a DateTime.");
        }
        ActualizarTablaAlDia();
        StateHasChanged();
    }
    private void cargarFila(string horaRecibida)
    {
        if (TimeSpan.TryParse(horaRecibida, out TimeSpan horaConvertida))
        {
            // La conversión fue exitosa, hora contiene el valor convertido
        }
        else
        {
            // La cadena no representa un formato de hora válido
        }
        elementoEncontrado = TurnosFiltrados.FirstOrDefault(objeto => objeto.Hora == horaConvertida);
        if (elementoEncontrado != null)
        {
            estado = "Agendado";
            using (DbDentistaContext db = new DbDentistaContext())
            {
                var paciente = DbContext.Pacientes.Find(elementoEncontrado.IdPaciente);
                nombrePaciente = paciente.Nombre + paciente.Apellido;
            }
            using (DbDentistaContext db = new DbDentistaContext())
            {
                var Odontologo = DbContext.Logins.Find(elementoEncontrado.IdOdontologo);
                nombreOdontologo = Odontologo.Usuario;
            }
            nombreTratamiento = elementoEncontrado.Practica;
            IdTurno = elementoEncontrado.Id;
        }
        else
        {
            estado = "Disponible";
            nombrePaciente = "";
            nombreOdontologo = "";
            nombreTratamiento = "";
            IdTurno = 0;
        }
    }

    private void ActualizarTablaAlDia()
    {
        TurnosFiltrados = ListaDeTurnos.Where(p => p.DiaMesAño == selectedDate).ToList();

    }


    async Task LoadHorarios()
    {
        // Aquí realizas la lógica para obtener los horarios correspondientes al día seleccionado
        // Puedes hacer una solicitud HTTP, consultar una base de datos, etc.
        // Por simplicidad, supongamos que simplemente generamos horarios de ejemplo

        horarios = new List<DateTime>();
        DateTime horaInicio = DateTime.Today.AddHours(8); // Ejemplo: 8:00 AM
        DateTime horaFin = DateTime.Today.AddHours(21); // Ejemplo: 6:00 PM
        while (horaInicio < horaFin)
        {
            horarios.Add(horaInicio);
            horaInicio = horaInicio.AddMinutes(30); // Intervalo de 30 minutos
        }
    }
    private void SeleccionarHora(string horapasada, int idturno)
    {
        TimeSpan.TryParse(horapasada, out TimeSpan horaConvertida);
        IdTurno = idturno;
        Hora = horaConvertida;
    }

    public void SeleccionarOdontologo(ChangeEventArgs args)
    {
        var odo = args.Value.ToString();
        odontologoSeleccionado = odo;
    }
    private void Agendar()
    {
        using (DbDentistaContext db = new DbDentistaContext())
        {
            var paciente = DbContext.Pacientes.Find(IdPacienteAtendido);
            PacienteAtendido = paciente.Nombre + paciente.Apellido;
            IdPacienteEditar = paciente.Id;
        }

        using (DbDentistaContext db = new DbDentistaContext())
        {
            var p = DbContext.Practicas.Find(IdPracticaSeleccionada);
            PracticaSeleccionada = p.Practica;
        }
        var prueba = new Turno();

        prueba.Practica = PracticaSeleccionada;
        prueba.IdOdontologo = IdOdontologoSeleccionado;
        prueba.DiaMesAño = selectedDate;
        prueba.Hora = Hora;
        prueba.IdPaciente = IdPacienteEditar;
        prueba.Observaciones = textoMultilinea;

        using (DbDentistaContext db = new DbDentistaContext())
        {
            db.Turnos.Add(prueba);
            db.SaveChanges();
        }
        OnInitialized();
        ActualizarTablaAlDia();
        StateHasChanged();
    }

    private void SeleccionarTurno(string horapasada, int seleccionado)
    {
        TimeSpan.TryParse(horapasada, out TimeSpan horaConvertida);
        Hora = horaConvertida;

        using (DbDentistaContext db = new DbDentistaContext())
        {
            var turno = DbContext.Turnos.Find(seleccionado);
            IdEdit = turno.Id;
            Observaciones = turno.Observaciones;
            IdPracticaSeleccionada = 0;
            IdPacienteAtendido = turno.IdPaciente;
            IdOdontologoSeleccionado = turno.IdOdontologo;
            textoMultilinea = turno.Observaciones;

        }
    }
    private void Editar(int idturno)
    {
        using (DbDentistaContext db = new DbDentistaContext())
        {
            var paciente = DbContext.Pacientes.Find(IdPacienteAtendido);
            PacienteAtendido = paciente.Nombre + paciente.Apellido;
            IdPacienteEditar = paciente.Id;
        }

        using (DbDentistaContext db = new DbDentistaContext())
        {
            var p = DbContext.Practicas.Find(IdPracticaSeleccionada);
            PracticaSeleccionada = p.Practica;
        }
        var turnoEditar = DbContext.Turnos.Find(idturno);
        if (turnoEditar != null)
        {
            using (DbDentistaContext db = new DbDentistaContext())
            {
                turnoEditar.Practica = PracticaSeleccionada;
                turnoEditar.IdOdontologo = IdOdontologoSeleccionado;
                turnoEditar.DiaMesAño = selectedDate;
                turnoEditar.Hora = Hora;
                turnoEditar.IdPaciente = IdPacienteEditar;
                turnoEditar.Observaciones = textoMultilinea;
                db.Update(turnoEditar);
                db.SaveChanges();

            }
        }
        OnInitialized();
        ActualizarTablaAlDia();
        StateHasChanged();

    }
    private void Borrar(int idturno)
    {

        //  Eliminarla.Eliminarla(practicaId);
        var turnoEliminar = DbContext.Turnos.Find(idturno);
        if (turnoEliminar != null)
        {
            using (DbDentistaContext db = new DbDentistaContext())
            {
                db.Turnos.Remove(turnoEliminar);
                db.SaveChanges();
            }
        }
        OnInitialized();
        ActualizarTablaAlDia();
        StateHasChanged();
    }
}

